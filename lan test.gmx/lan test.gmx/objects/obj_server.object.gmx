<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_chbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>health_s = 100;
press = false;
can_shoot = true;

name = global.playername;
///initialize server object
var type = network_socket_tcp;
var port = 8000;
max_clients = 1;
server = network_create_server(type,port,max_clients);
socket = noone;

var size = 1024;
var type2 = buffer_fixed;
var allignment = 1;
buffer = buffer_create(size, type2, allignment);

// choose shirt colour
//image_speed = 0;

randomize();
//image_index = irandom(sprite_get_number(spr_server));

// Set Variables
grenades = 5;
ammo = 30;
hp = 5;

zx = 0;
zy = 0;
zombie = false;

wx = 0;
wy = 0;
wall = false;

chbox = instance_create(x,y,obj_chbox);




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set spawn walls

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get input
scr_get_input();

hsp = 10 * (key_left + key_right);
vsp = 10 * (key_up + key_down);
scr_move();



/// Send location

buffer_seek(buffer,buffer_seek_start,0);

buffer_write(buffer,buffer_u8, 2); // 1
buffer_write(buffer,buffer_u32, x);// 1,mouse_x
buffer_write(buffer,buffer_u32,y); // 1,mouse_x,mouse_y

network_send_packet(socket,buffer, buffer_tell(buffer));

if socket != noone{
    if zombie = true{
        buffer_seek(buffer,buffer_seek_start,0);
           
        buffer_write(buffer,buffer_u8, 7); // 4
        buffer_write(buffer,buffer_u32, zx);// 1,mouse_x
        buffer_write(buffer,buffer_u32,zy); // 1,mouse_x,mouse_y        
        
        network_send_packet(socket,buffer, buffer_tell(buffer));
        zombie = false;
    }
    if wall = true{
        buffer_seek(buffer,buffer_seek_start,0);
           
        buffer_write(buffer,buffer_u8, 6); // 4
        buffer_write(buffer,buffer_u32, wx);// 1,mouse_x
        buffer_write(buffer,buffer_u32,wy); // 1,mouse_x,mouse_y        
        
        network_send_packet(socket,buffer, buffer_tell(buffer));
        wall = false;
    }
}
depth = -y;



//keep inside room
if(obj_server.x &lt; obj_server.sprite_width / 2){
    obj_server.x = obj_server.sprite_width / 2;
}
if(obj_server.y &lt; obj_server.sprite_height + 10){
    obj_server.y = obj_server.sprite_height + 10;
}
if(obj_server.x &gt; (room_width - obj_server.sprite_width / 2)){
    obj_server.x = room_width - obj_server.sprite_width / 2;
}
if(obj_server.y &gt; (room_height - obj_server.sprite_height + 10)){
    obj_server.y = room_height - obj_server.sprite_height + 10;
}



chbox.x = x - 2;
chbox.y = y - 63;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wall and turret create
// wall
/*if keyboard_check_pressed(ord("Q")){
    instance_create(x+50,y,obj_Wall);
    for(var i = -60; i &lt; 60; i++){
        if position_meeting(x+i,y,obj_Wall){
            if i &lt;0{
                x -= i;
            }else if i &gt;0{
                x += i;
            }else if i ==0{
                x += 64;
            }
        }
    }
}
*/
if(keyboard_check(vk_space)){
    if global.points &gt;= 25{
        
        if(!instance_exists(obj_highlight)){
            instance_create(mouse_x,mouse_y,obj_highlight);
        }
        if(mouse_check_button_pressed(mb_left)){
            if(obj_highlight.image_index != 0){
                instance_create(mouse_x,mouse_y,obj_Wall);
                global.walls += 1;
                global.points -= 25;
                global.walls -= 1;
            }
        }
    }
}

if(keyboard_check_released(vk_space)){
    if(instance_exists(obj_highlight)){
        destroy(obj_highlight);
    }
}








// turrent
if keyboard_check_pressed(ord("E")){
    if global.points &gt;= 50{
        turret = instance_create(x,y,obj_sturret);
        turret.creator = 0;
        global.points -= 50;
        //send
        if socket != noone{
            buffer_seek(buffer,buffer_seek_start,0);
                        
            buffer_write(buffer,buffer_u8, 10); // 4
            buffer_write(buffer,buffer_u32, x);// 1,mouse_x
            buffer_write(buffer,buffer_u32,y); // 1,mouse_x,mouse_y        
                        
            network_send_packet(socket,buffer, buffer_tell(buffer));
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Throw grenade
if grenades &gt; 0{
    //Create grenade
    with(instance_create(x+1,y-51,obj_sgrenade)){
        depth = obj_server.depth - 59;
        direction = point_direction(x,y,mouse_x,mouse_y);
        pointx = mouse_x;
        pointy = mouse_y;
        the_target = instance_create(pointx,pointy,obj_target);
    }
    
    //Send grenade
    if socket != noone{
        buffer_seek(buffer,buffer_seek_start,0);
        
        buffer_write(buffer,buffer_u8, 8); // 4
        buffer_write(buffer,buffer_u32, mouse_x);// 1,mouse_x
        buffer_write(buffer,buffer_u32,mouse_y); // 1,mouse_x,mouse_y
        
        network_send_packet(socket,buffer, buffer_tell(buffer));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(press == false){
    press = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!keyboard_check(vk_space)){
    if(press){
        if(can_shoot){
            /// Shoot + send to server
            if ammo &gt; 0{
                bullet = instance_create(x+1,y-51,obj_sbullet);
                with(bullet){
                direction = point_direction(x,y,mouse_x,mouse_y);
                depth = obj_server.depth - 59;
                }
                
                if socket != noone{
                    buffer_seek(buffer,buffer_seek_start,0);
                    
                    buffer_write(buffer,buffer_u8, 4); // 4
                    buffer_write(buffer,buffer_u32, mouse_x);// 1,mouse_x
                    buffer_write(buffer,buffer_u32,mouse_y); // 1,mouse_x,mouse_y        
                    
                    network_send_packet(socket,buffer, buffer_tell(buffer));
                }
            }
            can_shoot = false;
            alarm[1] = 6;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for clients and data
var type_event = async_load[? "type"];
switch(type_event){
    case network_type_connect:
        // Add a client to socket
        if (socket == noone){
            socket = async_load[? "socket"];
            
            instance_create(0,0,obj_other);//create the client object when connected
            instance_create(0,0,obj_god);//start wave countdown when connected
            instance_create(0,0,obj_zombiespawner);//start spawning aombize
            
            
            //send plaer sprite to client so not the same
            var size = 1024;
            var type = buffer_fixed;
            var allignment = 1;
            buffer = buffer_create(size, type, allignment);
            
            buffer_seek(buffer,buffer_seek_start,0);
        
            buffer_write(buffer,buffer_u8,5);
            buffer_write(buffer,buffer_u32,image_index);
        
            network_send_packet(socket,buffer, buffer_tell(buffer));
            
            //send name to client
            buffer_seek(buffer,buffer_seek_start,0);
        
            buffer_write(buffer,buffer_u8,9);
            buffer_write(buffer,buffer_string,name);
        
            network_send_packet(socket,buffer, buffer_tell(buffer));
            
            // Send Background to client
            
            buffer_seek(buffer,buffer_seek_start,0);
        
            buffer_write(buffer,buffer_u8,11);
            
            
            if(background_index[0] == background4){
                buffer_write(buffer,buffer_u32,1);
            }
            
            else if(background_index[0] == background5){
                buffer_write(buffer,buffer_u32,2);
            }
            
            else if(background_index[0] == background6){
                buffer_write(buffer,buffer_u32,3);
            }
            
            else if(background_index[0] == background7){
                buffer_write(buffer,buffer_u32,4);
            }
            
            else if(background_index[0] == background8){
                buffer_write(buffer,buffer_u32,5);
            }
            
        
            network_send_packet(socket,buffer, buffer_tell(buffer));
        }
        break;
        
    case network_type_disconnect:
        //remove client from socket
        socket = noone;
        with(obj_other){
            instance_destroy();
        }
        
        break;
        
    case network_type_data:
        // handle data
        var buffer = async_load[? "buffer"]
        buffer_seek(buffer,buffer_seek_start,0);
        scr_received_packet(buffer);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy server 
network_destroy(server);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

draw_set_font(font_names);
draw_set_halign(fa_center);
draw_set_colour(c_dkgray);
draw_text(x - 1,y-82 - sprite_height / 2,string(name));
draw_set_colour(c_white);
draw_text(x,y-80 - sprite_height/2,string(name));

// shadow of health bar
draw_set_colour(c_dkgray);
draw_rectangle(x - 35.5,y - sprite_height / 2 - 56,x + 39.5,y - sprite_height / 2 - 53,false);

// health bar
draw_set_colour(c_lime);
draw_rectangle(x - 37.5,y - sprite_height / 2 - 58,x + 37.5,y - sprite_height / 2 - 55,false);
if(health_s != 100){
    draw_set_colour(c_red);
    draw_rectangle(x + 37.5 - ((100-health_s) * 0.75),y - sprite_height / 2 - 58,x + 37.5,y - sprite_height / 2 - 55,false);
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
