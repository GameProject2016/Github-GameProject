<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_server</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>press = false;
can_shoot = true;
health_s = 100;
name = global.playername
var type = network_socket_tcp;
var ip = "101.165.16.163";
var port = 8000;
socket = network_create_socket(type);
connection = network_connect(socket,ip,port);
var size = 1024;
var type2 = buffer_fixed;
var allignment = 1;
buffer = buffer_create(size, type2, allignment);

// choose shirt colour
image_speed = 0;
image_index = 0;

while(image_index == obj_other.image_index){
    switch(image_index){
        case 0:
            image_index += 1;
            break;
            
        case 1:
            image_index += 1;
            break;
            
        case 2:
            image_index += 1;
            break;
            
        case 3:
            image_index += 1;
            break;
            
        case 4:
            image_index = 0;
            break;
    
    }
}
buffer_seek(buffer,buffer_seek_start,0);
        
buffer_write(buffer,buffer_u8,5);
buffer_write(buffer,buffer_u32,image_index);
        
network_send_packet(socket,buffer, buffer_tell(buffer));

//send name
buffer_seek(buffer,buffer_seek_start,0);

buffer_write(buffer,buffer_u8, 9); // 4
buffer_write(buffer,buffer_string, name);// 1,mouse_x

network_send_packet(socket,buffer, buffer_tell(buffer));

grenades = 5;
ammo = 30;
hp = 5;


chbox = instance_create(x,y,obj_chbox);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//get input
scr_get_input();

hsp = 10 * (key_left + key_right);
vsp = 10 * (key_up + key_down);
scr_move();
 
/// send position to server

buffer_seek(buffer,buffer_seek_start,0);

buffer_write(buffer,buffer_u8, 2); // 1
buffer_write(buffer,buffer_u32, x);// 1,mouse_x
buffer_write(buffer,buffer_u32,y); // 1,mouse_x,mouse_y

network_send_packet(socket,buffer, buffer_tell(buffer));

//send points
buffer_seek(buffer,buffer_seek_start,0);

buffer_write(buffer,buffer_u8, 12); // 1
buffer_write(buffer,buffer_u32, global.points);// 1,mouse_x

network_send_packet(socket,buffer, buffer_tell(buffer));

depth = -y;

//keep inside room
if(obj_client.x &lt; obj_client.sprite_width / 2){
    obj_client.x = obj_client.sprite_width / 2;
}
if(obj_client.y &lt; obj_client.sprite_height + 10){
    obj_client.y = obj_client.sprite_height + 10;
}
if(obj_client.x &gt; (room_width - obj_client.sprite_width / 2)){
    obj_client.x = room_width - obj_client.sprite_width / 2;
}
if(obj_client.y &gt; (room_height - obj_client.sprite_height + 10)){
    obj_client.y = room_height - obj_client.sprite_height + 10;
}


chbox.x = x - 2;
chbox.y = y - 63;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wall and turrent create
// wall
/*if keyboard_check_pressed(ord("Q")){
    instance_create(x+50,y,obj_Wall);
    for(var i = -60; i &lt; 60; i++){
        if position_meeting(x+i,y,obj_Wall){
            if i &lt;0{
                x -= i;
            }else if i &gt;0{
                x += i;
            }else if i ==0{
                x += 64;
            }
        }
    }
}
*/
if(keyboard_check(vk_space)){
    if global.points &gt;= 25{
        if(!instance_exists(obj_highlight)){
            instance_create(mouse_x,mouse_y,obj_highlight);
        }
        if(mouse_check_button(mb_left)){
            if(obj_highlight.image_index != 0){
                instance_create(mouse_x,mouse_y,obj_Wall);
                global.points -= 25;
            }
        }
    }
}

if(keyboard_check_released(vk_space)){
    if(instance_exists(obj_highlight)){
        destroy(obj_highlight);
    }
}








// turrent
if keyboard_check_pressed(ord("E")){
    if global.points &gt;= 50{
        turret =instance_create(x,y,obj_cturret);
        turret.creator = 0;
        global.points -= 50;
        //send
        if socket != noone{
            buffer_seek(buffer,buffer_seek_start,0);
                        
            buffer_write(buffer,buffer_u8, 10); // 4
            buffer_write(buffer,buffer_u32, x);// 1,mouse_x
            buffer_write(buffer,buffer_u32,y); // 1,mouse_x,mouse_y        
                        
            network_send_packet(socket,buffer, buffer_tell(buffer));
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Throw grenade
if grenades &gt; 0{
    //Create grenade
    with(instance_create(x+1,y-51,obj_cgrenade)){
        depth = obj_client.depth - 59;
        direction = point_direction(x,y,mouse_x,mouse_y);
        pointx = mouse_x;
        pointy = mouse_y;
        the_target = instance_create(pointx,pointy,obj_target);
    }
    
    //Send grenade
    if socket != noone{
        buffer_seek(buffer,buffer_seek_start,0);
        
        buffer_write(buffer,buffer_u8, 8); // 4
        buffer_write(buffer,buffer_u32, mouse_x);// 1,mouse_x
        buffer_write(buffer,buffer_u32,mouse_y); // 1,mouse_x,mouse_y
        
        network_send_packet(socket,buffer, buffer_tell(buffer));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(press == false){
    press = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(press){
    if(can_shoot){
        /// Shoot + send to server
        if ammo &gt; 0{
            bullet = instance_create(x+1,y-51,obj_cbullet);
                with(bullet){
                direction = point_direction(x,y,mouse_x,mouse_y);
                depth = obj_client.depth - 59;
                }
            
            if socket != noone{
                buffer_seek(buffer,buffer_seek_start,0);
                
                buffer_write(buffer,buffer_u8, 4); // 4
                buffer_write(buffer,buffer_u32, mouse_x);// 1,mouse_x
                buffer_write(buffer,buffer_u32,mouse_y); // 1,mouse_x,mouse_y        
                
                network_send_packet(socket,buffer, buffer_tell(buffer));
            }
        }
        can_shoot = false;
        alarm[1] = 6;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for clients and data
var type_event = async_load[? "type"];
switch(type_event){
    case network_type_connect:
        
        break;
        
    case network_type_disconnect:
        
        break;
        
    case network_type_data:
        // handle data
        var buffer = async_load[? "buffer"]
        buffer_seek(buffer,buffer_seek_start,0);
        scr_received_packet(buffer);
        break;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy socket + buffer
network_destroy(socket);
buffer_delete(buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font_names);
draw_set_halign(fa_center);
draw_set_colour(c_dkgray);
draw_text(x - 1,y-82 - sprite_height / 2,string(name));
draw_set_colour(c_white);
draw_text(x,y-80 - sprite_height/2,string(name));

// shadow of health bar
draw_set_colour(c_dkgray);
draw_rectangle(x - 36.5,y - sprite_height / 2 - 57,x + 38.5,y - sprite_height / 2 - 54,false);

// health bar
draw_set_colour(c_lime);
draw_rectangle(x - 37.5,y - sprite_height / 2 - 58,x + 37.5,y - sprite_height / 2 - 55,false);
if(health_s != 100){
    draw_set_colour(c_red);
    draw_rectangle(x + 37.5 - ((100-health_s) * 0.75),y - sprite_height / 2 - 58,x + 37.5,y - sprite_height / 2 - 55,false);
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
